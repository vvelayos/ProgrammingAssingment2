# Matrix inversion is a costly computation that helps us caching the  
# inverse of a matrix rather than having to compute it repeatedly.
# The following two functions are used to cache the inverse of a matrix.

# makeCacheMatrix function creates a special "matrix" object that can 
# cache its inverse; which is really a list containing a function to:
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix

makeCacheMatrix <- function(x = matrix()) {
     inv <- NULL
     set <- function(y) {
          x <<- y
          inv <<- NULL
     }
     get <- function() x
     setinverse <- function(inverse) inv <<- inverse
     getinverse <- function() inv
     list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}


# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been calculated. If so, it gets the result of the cache
# and skips the computation. If not, it uses the setinverse function to set the 
# value in the cache.

# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
     inv <- x$getinverse()
     if(!is.null(inv)) {
          message("getting cached data.")
          return(inv)
     }
     data <- x$get()
     inv <- solve(data)
     x$setinverse(inv)
     inv
}
